// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: hsm/hsm.proto

package hsm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReturnValue int32

const (
	ReturnValue_OK                               ReturnValue = 0
	ReturnValue_CANCEL                           ReturnValue = 1
	ReturnValue_HOST_MEMORY                      ReturnValue = 2
	ReturnValue_SLOT_ID_INVALID                  ReturnValue = 3
	ReturnValue_GENERAL_ERROR                    ReturnValue = 5
	ReturnValue_FUNCTION_FAILED                  ReturnValue = 6
	ReturnValue_ARGUMENTS_BAD                    ReturnValue = 7
	ReturnValue_NO_EVENT                         ReturnValue = 8
	ReturnValue_NEED_TO_CREATE_THREADS           ReturnValue = 9
	ReturnValue_CANT_LOCK                        ReturnValue = 10
	ReturnValue_ATTRIBUTE_READ_ONLY              ReturnValue = 16
	ReturnValue_ATTRIBUTE_SENSITIVE              ReturnValue = 17
	ReturnValue_ATTRIBUTE_TYPE_INVALID           ReturnValue = 18
	ReturnValue_ATTRIBUTE_VALUE_INVALID          ReturnValue = 19
	ReturnValue_ACTION_PROHIBITED                ReturnValue = 27
	ReturnValue_DATA_INVALID                     ReturnValue = 32
	ReturnValue_DATA_LEN_RANGE                   ReturnValue = 33
	ReturnValue_DEVICE_ERROR                     ReturnValue = 48
	ReturnValue_DEVICE_MEMORY                    ReturnValue = 49
	ReturnValue_DEVICE_REMOVED                   ReturnValue = 50
	ReturnValue_ENCRYPTED_DATA_INVALID           ReturnValue = 64
	ReturnValue_ENCRYPTED_DATA_LEN_RANGE         ReturnValue = 65
	ReturnValue_AEAD_DECRYPT_FAILED              ReturnValue = 66
	ReturnValue_FUNCTION_CANCELED                ReturnValue = 80
	ReturnValue_FUNCTION_NOT_PARALLEL            ReturnValue = 81
	ReturnValue_FUNCTION_NOT_SUPPORTED           ReturnValue = 84
	ReturnValue_KEY_HANDLE_INVALID               ReturnValue = 96
	ReturnValue_KEY_SIZE_RANGE                   ReturnValue = 98
	ReturnValue_KEY_TYPE_INCONSISTENT            ReturnValue = 99
	ReturnValue_KEY_NOT_NEEDED                   ReturnValue = 100
	ReturnValue_KEY_CHANGED                      ReturnValue = 101
	ReturnValue_KEY_NEEDED                       ReturnValue = 102
	ReturnValue_KEY_INDIGESTIBLE                 ReturnValue = 103
	ReturnValue_KEY_FUNCTION_NOT_PERMITTED       ReturnValue = 104
	ReturnValue_KEY_NOT_WRAPPABLE                ReturnValue = 105
	ReturnValue_KEY_UNEXTRACTABLE                ReturnValue = 106
	ReturnValue_MECHANISM_INVALID                ReturnValue = 112
	ReturnValue_MECHANISM_PARAM_INVALID          ReturnValue = 113
	ReturnValue_OBJECT_HANDLE_INVALID            ReturnValue = 130
	ReturnValue_OPERATION_ACTIVE                 ReturnValue = 144
	ReturnValue_OPERATION_NOT_INITIALIZED        ReturnValue = 145
	ReturnValue_PIN_INCORRECT                    ReturnValue = 160
	ReturnValue_PIN_INVALID                      ReturnValue = 161
	ReturnValue_PIN_LEN_RANGE                    ReturnValue = 162
	ReturnValue_PIN_EXPIRED                      ReturnValue = 163
	ReturnValue_PIN_LOCKED                       ReturnValue = 164
	ReturnValue_SESSION_CLOSED                   ReturnValue = 176
	ReturnValue_SESSION_COUNT                    ReturnValue = 177
	ReturnValue_SESSION_HANDLE_INVALID           ReturnValue = 179
	ReturnValue_SESSION_PARALLEL_NOT_SUPPORTED   ReturnValue = 180
	ReturnValue_SESSION_READ_ONLY                ReturnValue = 181
	ReturnValue_SESSION_EXISTS                   ReturnValue = 182
	ReturnValue_SESSION_READ_ONLY_EXISTS         ReturnValue = 183
	ReturnValue_SESSION_READ_WRITE_SO_EXISTS     ReturnValue = 184
	ReturnValue_SIGNATURE_INVALID                ReturnValue = 192
	ReturnValue_SIGNATURE_LEN_RANGE              ReturnValue = 193
	ReturnValue_TEMPLATE_INCOMPLETE              ReturnValue = 208
	ReturnValue_TEMPLATE_INCONSISTENT            ReturnValue = 209
	ReturnValue_TOKEN_NOT_PRESENT                ReturnValue = 224
	ReturnValue_TOKEN_NOT_RECOGNIZED             ReturnValue = 225
	ReturnValue_TOKEN_WRITE_PROTECTED            ReturnValue = 226
	ReturnValue_UNWRAPPING_KEY_HANDLE_INVALID    ReturnValue = 240
	ReturnValue_UNWRAPPING_KEY_SIZE_RANGE        ReturnValue = 241
	ReturnValue_UNWRAPPING_KEY_TYPE_INCONSISTENT ReturnValue = 242
	ReturnValue_USER_ALREADY_LOGGED_IN           ReturnValue = 256
	ReturnValue_USER_NOT_LOGGED_IN               ReturnValue = 257
	ReturnValue_USER_PIN_NOT_INITIALIZED         ReturnValue = 258
	ReturnValue_USER_TYPE_INVALID                ReturnValue = 259
	ReturnValue_USER_ANOTHER_ALREADY_LOGGED_IN   ReturnValue = 260
	ReturnValue_USER_TOO_MANY_TYPES              ReturnValue = 261
	ReturnValue_WRAPPED_KEY_INVALID              ReturnValue = 272
	ReturnValue_WRAPPED_KEY_LEN_RANGE            ReturnValue = 274
	ReturnValue_WRAPPING_KEY_HANDLE_INVALID      ReturnValue = 275
	ReturnValue_WRAPPING_KEY_SIZE_RANGE          ReturnValue = 276
	ReturnValue_WRAPPING_KEY_TYPE_INCONSISTENT   ReturnValue = 277
	ReturnValue_RANDOM_SEED_NOT_SUPPORTED        ReturnValue = 288
	ReturnValue_RANDOM_NO_RNG                    ReturnValue = 289
	ReturnValue_DOMAIN_PARAMS_INVALID            ReturnValue = 304
	ReturnValue_CURVE_NOT_SUPPORTED              ReturnValue = 320
	ReturnValue_BUFFER_TOO_SMALL                 ReturnValue = 336
	ReturnValue_SAVED_STATE_INVALID              ReturnValue = 352
	ReturnValue_INFORMATION_SENSITIVE            ReturnValue = 368
	ReturnValue_STATE_UNSAVEABLE                 ReturnValue = 384
	ReturnValue_CRYPTOKI_NOT_INITIALIZED         ReturnValue = 400
	ReturnValue_CRYPTOKI_ALREADY_INITIALIZED     ReturnValue = 401
	ReturnValue_MUTEX_BAD                        ReturnValue = 416
	ReturnValue_MUTEX_NOT_LOCKED                 ReturnValue = 417
	ReturnValue_NEW_PIN_MODE                     ReturnValue = 432
	ReturnValue_NEXT_OTP                         ReturnValue = 433
	ReturnValue_EXCEEDED_MAX_ITERATIONS          ReturnValue = 437
	ReturnValue_FIPS_SELF_TEST_FAILED            ReturnValue = 438
	ReturnValue_LIBRARY_LOAD_FAILED              ReturnValue = 439
	ReturnValue_PIN_TOO_WEAK                     ReturnValue = 440
	ReturnValue_PUBLIC_KEY_INVALID               ReturnValue = 441
	ReturnValue_FUNCTION_REJECTED                ReturnValue = 512
	ReturnValue_TOKEN_RESOURCE_EXCEEDED          ReturnValue = 513
	ReturnValue_OPERATION_CANCEL_FAILED          ReturnValue = 514
)

// Enum value maps for ReturnValue.
var (
	ReturnValue_name = map[int32]string{
		0:   "OK",
		1:   "CANCEL",
		2:   "HOST_MEMORY",
		3:   "SLOT_ID_INVALID",
		5:   "GENERAL_ERROR",
		6:   "FUNCTION_FAILED",
		7:   "ARGUMENTS_BAD",
		8:   "NO_EVENT",
		9:   "NEED_TO_CREATE_THREADS",
		10:  "CANT_LOCK",
		16:  "ATTRIBUTE_READ_ONLY",
		17:  "ATTRIBUTE_SENSITIVE",
		18:  "ATTRIBUTE_TYPE_INVALID",
		19:  "ATTRIBUTE_VALUE_INVALID",
		27:  "ACTION_PROHIBITED",
		32:  "DATA_INVALID",
		33:  "DATA_LEN_RANGE",
		48:  "DEVICE_ERROR",
		49:  "DEVICE_MEMORY",
		50:  "DEVICE_REMOVED",
		64:  "ENCRYPTED_DATA_INVALID",
		65:  "ENCRYPTED_DATA_LEN_RANGE",
		66:  "AEAD_DECRYPT_FAILED",
		80:  "FUNCTION_CANCELED",
		81:  "FUNCTION_NOT_PARALLEL",
		84:  "FUNCTION_NOT_SUPPORTED",
		96:  "KEY_HANDLE_INVALID",
		98:  "KEY_SIZE_RANGE",
		99:  "KEY_TYPE_INCONSISTENT",
		100: "KEY_NOT_NEEDED",
		101: "KEY_CHANGED",
		102: "KEY_NEEDED",
		103: "KEY_INDIGESTIBLE",
		104: "KEY_FUNCTION_NOT_PERMITTED",
		105: "KEY_NOT_WRAPPABLE",
		106: "KEY_UNEXTRACTABLE",
		112: "MECHANISM_INVALID",
		113: "MECHANISM_PARAM_INVALID",
		130: "OBJECT_HANDLE_INVALID",
		144: "OPERATION_ACTIVE",
		145: "OPERATION_NOT_INITIALIZED",
		160: "PIN_INCORRECT",
		161: "PIN_INVALID",
		162: "PIN_LEN_RANGE",
		163: "PIN_EXPIRED",
		164: "PIN_LOCKED",
		176: "SESSION_CLOSED",
		177: "SESSION_COUNT",
		179: "SESSION_HANDLE_INVALID",
		180: "SESSION_PARALLEL_NOT_SUPPORTED",
		181: "SESSION_READ_ONLY",
		182: "SESSION_EXISTS",
		183: "SESSION_READ_ONLY_EXISTS",
		184: "SESSION_READ_WRITE_SO_EXISTS",
		192: "SIGNATURE_INVALID",
		193: "SIGNATURE_LEN_RANGE",
		208: "TEMPLATE_INCOMPLETE",
		209: "TEMPLATE_INCONSISTENT",
		224: "TOKEN_NOT_PRESENT",
		225: "TOKEN_NOT_RECOGNIZED",
		226: "TOKEN_WRITE_PROTECTED",
		240: "UNWRAPPING_KEY_HANDLE_INVALID",
		241: "UNWRAPPING_KEY_SIZE_RANGE",
		242: "UNWRAPPING_KEY_TYPE_INCONSISTENT",
		256: "USER_ALREADY_LOGGED_IN",
		257: "USER_NOT_LOGGED_IN",
		258: "USER_PIN_NOT_INITIALIZED",
		259: "USER_TYPE_INVALID",
		260: "USER_ANOTHER_ALREADY_LOGGED_IN",
		261: "USER_TOO_MANY_TYPES",
		272: "WRAPPED_KEY_INVALID",
		274: "WRAPPED_KEY_LEN_RANGE",
		275: "WRAPPING_KEY_HANDLE_INVALID",
		276: "WRAPPING_KEY_SIZE_RANGE",
		277: "WRAPPING_KEY_TYPE_INCONSISTENT",
		288: "RANDOM_SEED_NOT_SUPPORTED",
		289: "RANDOM_NO_RNG",
		304: "DOMAIN_PARAMS_INVALID",
		320: "CURVE_NOT_SUPPORTED",
		336: "BUFFER_TOO_SMALL",
		352: "SAVED_STATE_INVALID",
		368: "INFORMATION_SENSITIVE",
		384: "STATE_UNSAVEABLE",
		400: "CRYPTOKI_NOT_INITIALIZED",
		401: "CRYPTOKI_ALREADY_INITIALIZED",
		416: "MUTEX_BAD",
		417: "MUTEX_NOT_LOCKED",
		432: "NEW_PIN_MODE",
		433: "NEXT_OTP",
		437: "EXCEEDED_MAX_ITERATIONS",
		438: "FIPS_SELF_TEST_FAILED",
		439: "LIBRARY_LOAD_FAILED",
		440: "PIN_TOO_WEAK",
		441: "PUBLIC_KEY_INVALID",
		512: "FUNCTION_REJECTED",
		513: "TOKEN_RESOURCE_EXCEEDED",
		514: "OPERATION_CANCEL_FAILED",
	}
	ReturnValue_value = map[string]int32{
		"OK":                               0,
		"CANCEL":                           1,
		"HOST_MEMORY":                      2,
		"SLOT_ID_INVALID":                  3,
		"GENERAL_ERROR":                    5,
		"FUNCTION_FAILED":                  6,
		"ARGUMENTS_BAD":                    7,
		"NO_EVENT":                         8,
		"NEED_TO_CREATE_THREADS":           9,
		"CANT_LOCK":                        10,
		"ATTRIBUTE_READ_ONLY":              16,
		"ATTRIBUTE_SENSITIVE":              17,
		"ATTRIBUTE_TYPE_INVALID":           18,
		"ATTRIBUTE_VALUE_INVALID":          19,
		"ACTION_PROHIBITED":                27,
		"DATA_INVALID":                     32,
		"DATA_LEN_RANGE":                   33,
		"DEVICE_ERROR":                     48,
		"DEVICE_MEMORY":                    49,
		"DEVICE_REMOVED":                   50,
		"ENCRYPTED_DATA_INVALID":           64,
		"ENCRYPTED_DATA_LEN_RANGE":         65,
		"AEAD_DECRYPT_FAILED":              66,
		"FUNCTION_CANCELED":                80,
		"FUNCTION_NOT_PARALLEL":            81,
		"FUNCTION_NOT_SUPPORTED":           84,
		"KEY_HANDLE_INVALID":               96,
		"KEY_SIZE_RANGE":                   98,
		"KEY_TYPE_INCONSISTENT":            99,
		"KEY_NOT_NEEDED":                   100,
		"KEY_CHANGED":                      101,
		"KEY_NEEDED":                       102,
		"KEY_INDIGESTIBLE":                 103,
		"KEY_FUNCTION_NOT_PERMITTED":       104,
		"KEY_NOT_WRAPPABLE":                105,
		"KEY_UNEXTRACTABLE":                106,
		"MECHANISM_INVALID":                112,
		"MECHANISM_PARAM_INVALID":          113,
		"OBJECT_HANDLE_INVALID":            130,
		"OPERATION_ACTIVE":                 144,
		"OPERATION_NOT_INITIALIZED":        145,
		"PIN_INCORRECT":                    160,
		"PIN_INVALID":                      161,
		"PIN_LEN_RANGE":                    162,
		"PIN_EXPIRED":                      163,
		"PIN_LOCKED":                       164,
		"SESSION_CLOSED":                   176,
		"SESSION_COUNT":                    177,
		"SESSION_HANDLE_INVALID":           179,
		"SESSION_PARALLEL_NOT_SUPPORTED":   180,
		"SESSION_READ_ONLY":                181,
		"SESSION_EXISTS":                   182,
		"SESSION_READ_ONLY_EXISTS":         183,
		"SESSION_READ_WRITE_SO_EXISTS":     184,
		"SIGNATURE_INVALID":                192,
		"SIGNATURE_LEN_RANGE":              193,
		"TEMPLATE_INCOMPLETE":              208,
		"TEMPLATE_INCONSISTENT":            209,
		"TOKEN_NOT_PRESENT":                224,
		"TOKEN_NOT_RECOGNIZED":             225,
		"TOKEN_WRITE_PROTECTED":            226,
		"UNWRAPPING_KEY_HANDLE_INVALID":    240,
		"UNWRAPPING_KEY_SIZE_RANGE":        241,
		"UNWRAPPING_KEY_TYPE_INCONSISTENT": 242,
		"USER_ALREADY_LOGGED_IN":           256,
		"USER_NOT_LOGGED_IN":               257,
		"USER_PIN_NOT_INITIALIZED":         258,
		"USER_TYPE_INVALID":                259,
		"USER_ANOTHER_ALREADY_LOGGED_IN":   260,
		"USER_TOO_MANY_TYPES":              261,
		"WRAPPED_KEY_INVALID":              272,
		"WRAPPED_KEY_LEN_RANGE":            274,
		"WRAPPING_KEY_HANDLE_INVALID":      275,
		"WRAPPING_KEY_SIZE_RANGE":          276,
		"WRAPPING_KEY_TYPE_INCONSISTENT":   277,
		"RANDOM_SEED_NOT_SUPPORTED":        288,
		"RANDOM_NO_RNG":                    289,
		"DOMAIN_PARAMS_INVALID":            304,
		"CURVE_NOT_SUPPORTED":              320,
		"BUFFER_TOO_SMALL":                 336,
		"SAVED_STATE_INVALID":              352,
		"INFORMATION_SENSITIVE":            368,
		"STATE_UNSAVEABLE":                 384,
		"CRYPTOKI_NOT_INITIALIZED":         400,
		"CRYPTOKI_ALREADY_INITIALIZED":     401,
		"MUTEX_BAD":                        416,
		"MUTEX_NOT_LOCKED":                 417,
		"NEW_PIN_MODE":                     432,
		"NEXT_OTP":                         433,
		"EXCEEDED_MAX_ITERATIONS":          437,
		"FIPS_SELF_TEST_FAILED":            438,
		"LIBRARY_LOAD_FAILED":              439,
		"PIN_TOO_WEAK":                     440,
		"PUBLIC_KEY_INVALID":               441,
		"FUNCTION_REJECTED":                512,
		"TOKEN_RESOURCE_EXCEEDED":          513,
		"OPERATION_CANCEL_FAILED":          514,
	}
)

func (x ReturnValue) Enum() *ReturnValue {
	p := new(ReturnValue)
	*p = x
	return p
}

func (x ReturnValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnValue) Descriptor() protoreflect.EnumDescriptor {
	return file_hsm_hsm_proto_enumTypes[0].Descriptor()
}

func (ReturnValue) Type() protoreflect.EnumType {
	return &file_hsm_hsm_proto_enumTypes[0]
}

func (x ReturnValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnValue.Descriptor instead.
func (ReturnValue) EnumDescriptor() ([]byte, []int) {
	return file_hsm_hsm_proto_rawDescGZIP(), []int{0}
}

type OpenSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId uint64 `protobuf:"varint,1,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Flags  uint64 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *OpenSessionRequest) Reset() {
	*x = OpenSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hsm_hsm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSessionRequest) ProtoMessage() {}

func (x *OpenSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hsm_hsm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSessionRequest.ProtoReflect.Descriptor instead.
func (*OpenSessionRequest) Descriptor() ([]byte, []int) {
	return file_hsm_hsm_proto_rawDescGZIP(), []int{0}
}

func (x *OpenSessionRequest) GetSlotId() uint64 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *OpenSessionRequest) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type OpenSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        *OpenSessionResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ReturnValue ReturnValue              `protobuf:"varint,2,opt,name=returnValue,proto3,enum=hsm.ReturnValue" json:"returnValue,omitempty"`
}

func (x *OpenSessionResponse) Reset() {
	*x = OpenSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hsm_hsm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSessionResponse) ProtoMessage() {}

func (x *OpenSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hsm_hsm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSessionResponse.ProtoReflect.Descriptor instead.
func (*OpenSessionResponse) Descriptor() ([]byte, []int) {
	return file_hsm_hsm_proto_rawDescGZIP(), []int{1}
}

func (x *OpenSessionResponse) GetData() *OpenSessionResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *OpenSessionResponse) GetReturnValue() ReturnValue {
	if x != nil {
		return x.ReturnValue
	}
	return ReturnValue_OK
}

type OpenSessionResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionHandle uint64 `protobuf:"varint,1,opt,name=sessionHandle,proto3" json:"sessionHandle,omitempty"`
}

func (x *OpenSessionResponseData) Reset() {
	*x = OpenSessionResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hsm_hsm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSessionResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSessionResponseData) ProtoMessage() {}

func (x *OpenSessionResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_hsm_hsm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSessionResponseData.ProtoReflect.Descriptor instead.
func (*OpenSessionResponseData) Descriptor() ([]byte, []int) {
	return file_hsm_hsm_proto_rawDescGZIP(), []int{2}
}

func (x *OpenSessionResponseData) GetSessionHandle() uint64 {
	if x != nil {
		return x.SessionHandle
	}
	return 0
}

type CloseSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionHandle uint64 `protobuf:"varint,1,opt,name=sessionHandle,proto3" json:"sessionHandle,omitempty"`
}

func (x *CloseSessionRequest) Reset() {
	*x = CloseSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hsm_hsm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionRequest) ProtoMessage() {}

func (x *CloseSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hsm_hsm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionRequest.ProtoReflect.Descriptor instead.
func (*CloseSessionRequest) Descriptor() ([]byte, []int) {
	return file_hsm_hsm_proto_rawDescGZIP(), []int{3}
}

func (x *CloseSessionRequest) GetSessionHandle() uint64 {
	if x != nil {
		return x.SessionHandle
	}
	return 0
}

type CloseSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnValue ReturnValue `protobuf:"varint,1,opt,name=returnValue,proto3,enum=hsm.ReturnValue" json:"returnValue,omitempty"`
}

func (x *CloseSessionResponse) Reset() {
	*x = CloseSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hsm_hsm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionResponse) ProtoMessage() {}

func (x *CloseSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hsm_hsm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionResponse.ProtoReflect.Descriptor instead.
func (*CloseSessionResponse) Descriptor() ([]byte, []int) {
	return file_hsm_hsm_proto_rawDescGZIP(), []int{4}
}

func (x *CloseSessionResponse) GetReturnValue() ReturnValue {
	if x != nil {
		return x.ReturnValue
	}
	return ReturnValue_OK
}

type CloseAllSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId uint64 `protobuf:"varint,1,opt,name=slotId,proto3" json:"slotId,omitempty"`
}

func (x *CloseAllSessionsRequest) Reset() {
	*x = CloseAllSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hsm_hsm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAllSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAllSessionsRequest) ProtoMessage() {}

func (x *CloseAllSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hsm_hsm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAllSessionsRequest.ProtoReflect.Descriptor instead.
func (*CloseAllSessionsRequest) Descriptor() ([]byte, []int) {
	return file_hsm_hsm_proto_rawDescGZIP(), []int{5}
}

func (x *CloseAllSessionsRequest) GetSlotId() uint64 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

type CloseAllSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnValue ReturnValue `protobuf:"varint,1,opt,name=returnValue,proto3,enum=hsm.ReturnValue" json:"returnValue,omitempty"`
}

func (x *CloseAllSessionsResponse) Reset() {
	*x = CloseAllSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hsm_hsm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAllSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAllSessionsResponse) ProtoMessage() {}

func (x *CloseAllSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hsm_hsm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAllSessionsResponse.ProtoReflect.Descriptor instead.
func (*CloseAllSessionsResponse) Descriptor() ([]byte, []int) {
	return file_hsm_hsm_proto_rawDescGZIP(), []int{6}
}

func (x *CloseAllSessionsResponse) GetReturnValue() ReturnValue {
	if x != nil {
		return x.ReturnValue
	}
	return ReturnValue_OK
}

var File_hsm_hsm_proto protoreflect.FileDescriptor

var file_hsm_hsm_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x73, 0x6d, 0x2f, 0x68, 0x73, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x68, 0x73, 0x6d, 0x22, 0x42, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x7b, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x68, 0x73, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x68, 0x73, 0x6d, 0x2e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x68, 0x73, 0x6d, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x31, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x68, 0x73, 0x6d, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2a, 0xf1, 0x12, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x42, 0x41, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0a,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x12, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44,
	0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x45, 0x4e,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x31, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x32, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x40, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4c, 0x45, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x41, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x45, 0x41, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x42, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x50, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4c, 0x4c, 0x45, 0x4c, 0x10, 0x51, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x54, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x60, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45,
	0x59, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x62, 0x12, 0x19,
	0x0a, 0x15, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e,
	0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x63, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x64, 0x12, 0x0f, 0x0a,
	0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x66, 0x12, 0x14,
	0x0a, 0x10, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x49, 0x42,
	0x4c, 0x45, 0x10, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x68, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x57, 0x52, 0x41, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x69, 0x12, 0x15, 0x0a, 0x11, 0x4b,
	0x45, 0x59, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x6a, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x43,
	0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x71, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x82, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x90, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x91, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x49, 0x4e,
	0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0xa0, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x50, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xa1, 0x01, 0x12,
	0x12, 0x0a, 0x0d, 0x50, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0xa2, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0xa3, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0xa4, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0xb0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xb1, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xb3, 0x01, 0x12, 0x23, 0x0a, 0x1e,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xb4,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xb5, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xb6, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xb7, 0x01, 0x12, 0x21, 0x0a,
	0x1c, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x53, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xb8, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xc0, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0xc1, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xd0, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49,
	0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0xd1, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0xe0, 0x01,
	0x12, 0x19, 0x0a, 0x14, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10, 0xe1, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0xe2, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x4e, 0x57, 0x52, 0x41,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xf0, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55,
	0x4e, 0x57, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xf1, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x55,
	0x4e, 0x57, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10,
	0xf2, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x80, 0x02, 0x12,
	0x17, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x47,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x81, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x82, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x83, 0x02, 0x12,
	0x23, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x10, 0x84, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x85, 0x02, 0x12, 0x18,
	0x0a, 0x13, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x90, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x57, 0x52, 0x41, 0x50,
	0x50, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x92, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x57, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x93, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x57, 0x52, 0x41, 0x50, 0x50, 0x49,
	0x4e, 0x47, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x94, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x57, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53,
	0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x95, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xa0, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x4e, 0x47, 0x10, 0xa1, 0x02, 0x12, 0x1a, 0x0a,
	0x15, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xb0, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x55, 0x52,
	0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0xc0, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0xd0, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x41,
	0x56, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0xe0, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0xf0, 0x02,
	0x12, 0x15, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x41, 0x56, 0x45,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x80, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x4b, 0x49, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x90, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x4b, 0x49, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x91, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x4d, 0x55, 0x54,
	0x45, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x10, 0xa0, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x55, 0x54,
	0x45, 0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xa1, 0x03,
	0x12, 0x11, 0x0a, 0x0c, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0xb0, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x4f, 0x54, 0x50, 0x10,
	0xb1, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xb5, 0x03,
	0x12, 0x1a, 0x0a, 0x15, 0x46, 0x49, 0x50, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xb6, 0x03, 0x12, 0x18, 0x0a, 0x13,
	0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0xb7, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x49, 0x4e, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x10, 0xb8, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0xb9, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x80, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x81, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x82, 0x04, 0x32, 0xf1, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x68, 0x73,
	0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x73, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x2e, 0x68, 0x73, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x73, 0x6d,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x41, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x68, 0x73,
	0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x73, 0x6d, 0x2e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x56, 0x0a, 0x21, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x65, 0x64, 0x69, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x64, 0x69, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x68, 0x73, 0x6d, 0x2e, 0x68, 0x73, 0x6d, 0x42,
	0x08, 0x48, 0x53, 0x4d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x25, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x64, 0x69, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x64, 0x69, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x68, 0x73, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x68,
	0x73, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hsm_hsm_proto_rawDescOnce sync.Once
	file_hsm_hsm_proto_rawDescData = file_hsm_hsm_proto_rawDesc
)

func file_hsm_hsm_proto_rawDescGZIP() []byte {
	file_hsm_hsm_proto_rawDescOnce.Do(func() {
		file_hsm_hsm_proto_rawDescData = protoimpl.X.CompressGZIP(file_hsm_hsm_proto_rawDescData)
	})
	return file_hsm_hsm_proto_rawDescData
}

var file_hsm_hsm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hsm_hsm_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_hsm_hsm_proto_goTypes = []any{
	(ReturnValue)(0),                 // 0: hsm.ReturnValue
	(*OpenSessionRequest)(nil),       // 1: hsm.OpenSessionRequest
	(*OpenSessionResponse)(nil),      // 2: hsm.OpenSessionResponse
	(*OpenSessionResponseData)(nil),  // 3: hsm.OpenSessionResponseData
	(*CloseSessionRequest)(nil),      // 4: hsm.CloseSessionRequest
	(*CloseSessionResponse)(nil),     // 5: hsm.CloseSessionResponse
	(*CloseAllSessionsRequest)(nil),  // 6: hsm.CloseAllSessionsRequest
	(*CloseAllSessionsResponse)(nil), // 7: hsm.CloseAllSessionsResponse
}
var file_hsm_hsm_proto_depIdxs = []int32{
	3, // 0: hsm.OpenSessionResponse.data:type_name -> hsm.OpenSessionResponseData
	0, // 1: hsm.OpenSessionResponse.returnValue:type_name -> hsm.ReturnValue
	0, // 2: hsm.CloseSessionResponse.returnValue:type_name -> hsm.ReturnValue
	0, // 3: hsm.CloseAllSessionsResponse.returnValue:type_name -> hsm.ReturnValue
	1, // 4: hsm.SessionManagement.OpenSession:input_type -> hsm.OpenSessionRequest
	4, // 5: hsm.SessionManagement.CloseSession:input_type -> hsm.CloseSessionRequest
	6, // 6: hsm.SessionManagement.CloseAllSessions:input_type -> hsm.CloseAllSessionsRequest
	2, // 7: hsm.SessionManagement.OpenSession:output_type -> hsm.OpenSessionResponse
	5, // 8: hsm.SessionManagement.CloseSession:output_type -> hsm.CloseSessionResponse
	7, // 9: hsm.SessionManagement.CloseAllSessions:output_type -> hsm.CloseAllSessionsResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_hsm_hsm_proto_init() }
func file_hsm_hsm_proto_init() {
	if File_hsm_hsm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hsm_hsm_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OpenSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hsm_hsm_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OpenSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hsm_hsm_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OpenSessionResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hsm_hsm_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CloseSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hsm_hsm_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CloseSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hsm_hsm_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CloseAllSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hsm_hsm_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CloseAllSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hsm_hsm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hsm_hsm_proto_goTypes,
		DependencyIndexes: file_hsm_hsm_proto_depIdxs,
		EnumInfos:         file_hsm_hsm_proto_enumTypes,
		MessageInfos:      file_hsm_hsm_proto_msgTypes,
	}.Build()
	File_hsm_hsm_proto = out.File
	file_hsm_hsm_proto_rawDesc = nil
	file_hsm_hsm_proto_goTypes = nil
	file_hsm_hsm_proto_depIdxs = nil
}
